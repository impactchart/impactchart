# Run unit tests every time a branch is pushed. This is the simplest
# version of unit testing, just on a single platform.
#
# See also:
#    test-matrix.yml: run on all platforms for each pull request
#    coverage-report.yml: runs on merge to main to generate coverage reports

name: unit-test

on:
  push:
    branches-ignore:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  unit-test:
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #      Install llvm so we can use shap
      #----------------------------------------------
      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "10.0"
      - name: ls the bin
        run: ls ${{ env.LLVM_PATH }}/bin
      - name: Add LLVM to PATH
        run: echo ${{ env.LLVM_PATH }}/bin >> $GITHUB_PATH
      - name: Set LLVM_CONFIG
        run: echo "LLVM_CONFIG=${{ env.LLVM_PATH }}/bin/llvm-config" >> $GITHUB_ENV
      - name: Check settings
        run: echo $PATH $LLVM_CONFIG
      # - name: Install llvm
      #   run: sudo apt-get install llvm-10
      #  run: sudo apt-get install apt-show-versions ; sudo apt-show-versions -a llvm ; sudo apt-get install llvm
      #----------------------------------------------
      #       check out repo
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v3
      #----------------------------------------------
      #       set up python
      #----------------------------------------------
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: poetry install --no-interaction
      #----------------------------------------------
      #              run test suite
      #----------------------------------------------
      - name: Run tests
        id: runTests
        run: |
          source .venv/bin/activate
          python -m pytest
      #----------------------------------------------
      #              archive test artifacts
      #----------------------------------------------
      - name: Archive test artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test_artifacts
          path: tests/_test_artifacts
          retention-days: 7
