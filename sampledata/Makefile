
# The input data file
DATA=evl-34.csv

# Where to put the results. For this demonstration
OUTPUT_DIR := ./build

PARAMS := $(OUTPUT_DIR)/params.yaml

PLOT_DIR := $(OUTPUT_DIR)/impact

# These are all the features in the input file. We will
# plot one impact chart per feature.
X_FEATURES=\
   B25119_003E_2018 \
   frac_B25003A_003E frac_B25003B_003E frac_B25003C_003E \
   frac_B25003D_003E frac_B25003E_003E frac_B25003F_003E \
   frac_B25003G_003E frac_B25003H_003E frac_B25003I_003E

# The y column that our underlying models will try to predict.
Y_FEATURE=filing_rate

# The weight column.
W_FEATURE=B25003_003E

# How to filter the data.
FILTERS := STATE=34 COUNTY=017

# These are the names of the features. They will be used
# in the title and labels in the charts to make them more
# human-readable. 
FEATURE_NAME_B25119_003E_2018="Median Household Income for Renters"
FEATURE_NAME_frac_B25003A_003E="Fraction of Renters who Identify as White Alone"
FEATURE_NAME_frac_B25003B_003E="Fraction of Renters who Identify as Black or African American Alone"
FEATURE_NAME_frac_B25003C_003E="Fraction of Renters who Identify as American Indian and Alaska Native Alone"
FEATURE_NAME_frac_B25003D_003E="Fraction of Renters who Identify as Asian Alone"
FEATURE_NAME_frac_B25003E_003E="Fraction of Renters who Identify as Native Hawaiian and Other Pacific Islander Alone"
FEATURE_NAME_frac_B25003F_003E="Fraction of Renters who Identify as Some Other Race Alone"
FEATURE_NAME_frac_B25003G_003E="Fraction of Renters who Identify as Two or More Races"
FEATURE_NAME_frac_B25003H_003E="Fraction of Renters who Identify as White Alone, Not Hispanic or Latino"
FEATURE_NAME_frac_B25003I_003E="Fraction of Renters who Identify as Hispanic or Latino"

PLOT_SUBTITLE := "Hudson County, NJ"

# Plot configuration details: k = size of ensemble; seed = random number generator seed.
K := 50
SEED := 0x34231FDC

## ADVANCED SETTINGS
#
# In most cases there should be nothing below here that needs
# to be changed.

# Merge the names and features into a form that is easy 
# for the command-line tool to parse.
NAMED_X_FEATURES := $(foreach f,$(X_FEATURES),$(f):$(FEATURE_NAME_$(f)))

# There is one plot file per feature, with a suffix for the filter
to_suffix = $(subst $(eval ) ,-,$1)
PLOTS := $(X_FEATURES:%=${PLOT_DIR}/%_$(call to_suffix,$(FILTERS)).png)

.PHONY: all plot clean

all: plot

# Optimize to get the parameters.
${PARAMS}: ${DATA}
	mkdir -p ${@D}
	python -m impactchart.cli.impactchart \
  	optimize \
	-X ${X_FEATURES} \
	-y ${Y_FEATURE} \
	-w ${W_FEATURE} \
	-f ${FILTERS} \
	-o $@ \
	$<

plot: ${PLOTS}

# All the plots are generated by a single invocation.
${PLOTS} &: ${PARAMS} ${DATA}
	echo Plotting $(PLOTS)
	mkdir -p ${PLOT_DIR}
	python -m impactchart.cli.impactchart \
	--log INFO \
	plot \
	-p ${PARAMS} \
	-X ${NAMED_X_FEATURES} \
	-y ${Y_FEATURE} \
	-w ${W_FEATURE} \
	-f ${FILTERS} \
	--subtitle ${PLOT_SUBTITLE} \
	--y-name "Annual Eviction Rate" \
	-o ${PLOT_DIR} \
	-S ${SEED} \
	-k ${K} \
	${DATA}

clean:
	rm ${PLOT_DIR}/*
	rm ${PARAMS}
